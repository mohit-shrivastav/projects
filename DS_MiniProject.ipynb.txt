{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "def pop_fore_AIM(data_temp):\n",
        "    #calculating average increase in population\n",
        "    sum = 0\n",
        "    for i in range(1, len(data_temp)):\n",
        "        sum += (list(data_temp.values())[i] - list(data_temp.values())[i-1])\n",
        "   \n",
        "    x_bar = round(sum/(n-1), 2)\n",
        "    \n",
        "    #initial population\n",
        "    p_i = list(data_temp.values())[-1]\n",
        "\n",
        "    #calculating future population of next 5 decades\n",
        "    for i in range(1,6):\n",
        "        p_f = int(p_i + i*x_bar)\n",
        "        data_temp[list(data_temp.keys())[-1]+10] = p_f\n",
        "    \n",
        "    return data_temp"
      ],
      "metadata": {
        "id": "sGPgn5lmFtqw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def pop_fore_GIM(data_temp):\n",
        "    #calculating geometric mean of population\n",
        "    sum = 0\n",
        "    for i in range(1, len(data_temp)):\n",
        "        sum += (((list(data_temp.values())[i] - list(data_temp.values())[i-1])/list(data_temp.values())[i-1])*100)\n",
        "   \n",
        "    r = round(sum/(len(data_temp)-1), 2)\n",
        "    \n",
        "    #initial population\n",
        "    p_i = list(data_temp.values())[-1]\n",
        "\n",
        "    #calculating future population of next 5 decades\n",
        "    for n in range(1,6):\n",
        "        p_f = int(p_i*((1+(r/100))**n))\n",
        "        data_temp[list(data_temp.keys())[-1]+10] = p_f\n",
        "\n",
        "    return data_temp"
      ],
      "metadata": {
        "id": "OUiId6JHJlAc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def pop_fore_IIM(data_temp):\n",
        "    keys = list(data_temp.keys())\n",
        "    val = list(data_temp.values())\n",
        "\n",
        "    #calculating geometric mean of population\n",
        "    #increase in  population\n",
        "    x = []\n",
        "    \n",
        "    #incremental increase\n",
        "    y = []\n",
        "\n",
        "    for i in range(1, len(data_temp)):\n",
        "        if i == 1:\n",
        "            x.append(val[i] - val[i-1])\n",
        "        else:\n",
        "            x.append(val[i] - val[i-1])\n",
        "            y.append(x[i-1] - x[i-2])\n",
        "    \n",
        "    #average increase in population\n",
        "    x_avg = sum(x)/len(x)\n",
        "\n",
        "    #average incremental increase\n",
        "    y_avg = sum(y)/len(y)\n",
        "\n",
        "    p_i = val[-1]\n",
        "\n",
        "    #calculating future population of next 5 decades\n",
        "    for n in range(1,6):\n",
        "        p_f = int(p_i + (n*x_avg) + ((n*(n+1)*y_avg)/2))\n",
        "        data_temp[list(data_temp.keys())[-1]+10] = p_f\n",
        "\n",
        "    return data_temp"
      ],
      "metadata": {
        "id": "X4ONXu7pKeSJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import math\n",
        "def pop_fore_LCM(data_temp):\n",
        "    keys = list(data_temp.keys())\n",
        "    val = list(data_temp.values())\n",
        "\n",
        "    #calculating geometric mean of population\n",
        "    p_o = val[0]\n",
        "    p_1 = val[1]\n",
        "    p_2 = val[2]\n",
        "    t_1 = keys[1] - keys[0]\n",
        "\n",
        "    #Saturated Population\n",
        "    p_s = int(((2*p_o*p_1*p_2)-(p_1*p_1*(p_o+p_2)))/((p_o*p_2)-(p_1**2)))\n",
        "\n",
        "    m = round((p_s-p_o)/p_o,2)\n",
        "    n = abs(round((2.3/t_1)*(math.log(((p_o*(p_s-p_1))/(p_1*(p_s-p_o))),10)),2))\n",
        "    print(p_s, m, n)\n",
        "    #calculating future population of next 5 decades\n",
        "    #for i in range(1,6):\n",
        "    p_f = int(p_s/(1+(m*(10**math.log(n*10*len(data_temp))))))\n",
        "    data_temp[keys[-1]+10] = p_f\n",
        "\n",
        "    return data_temp"
      ],
      "metadata": {
        "id": "TntUqhocKehV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def pop_fore_DGM(data_temp):\n",
        "    keys = list(data_temp.keys())\n",
        "    val = list(data_temp.values())\n",
        "\n",
        "    #calculating decreasing rate of population\n",
        "    #percentage increase in  population\n",
        "    p_i = []\n",
        "    \n",
        "    #decrease in increase\n",
        "    d_i = []\n",
        "\n",
        "    for i in range(1, len(data_temp)):\n",
        "        if i == 1:\n",
        "            p_i.append(round((((val[i]-val[i-1])*100)/val[i-1]),1))\n",
        "        else:\n",
        "            p_i.append(round((((val[i]-val[i-1])*100)/val[i-1]),1))\n",
        "            d_i.append(p_i[i-2] - p_i[i-1])\n",
        "    \n",
        "    #average increase in population\n",
        "    d_i_avg = sum(d_i)/len(d_i)\n",
        "    \n",
        "   \n",
        "    #calculating future population of next 5 decades\n",
        "    for n in range(1,6):\n",
        "        p_i.append(p_i[-1]-d_i_avg)\n",
        "        keys = list(data_temp.keys())\n",
        "        val = list(data_temp.values())\n",
        "        p_f = int(val[-1]+((p_i[-1]*val[-1])/100))\n",
        "        data_temp[keys[-1]+10] = p_f\n",
        "\n",
        "    return data_temp"
      ],
      "metadata": {
        "id": "e7SQ4nTHKe60"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#importing matplotlib for visualization\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import copy \n",
        "\n",
        "#Displaying various population forecasting methods\n",
        "print(\"------Welcome To Population Growth Predictor------\")\n",
        "print(\"1. Arithmetic Increase Method\")\n",
        "print(\"2. Geometic Increase Method\")\n",
        "print(\"3. Incremental Increase Method\")\n",
        "print(\"4. Decrease Rate of Growth Method\")\n",
        "\n",
        "\n",
        "#taking population data from user\n",
        "data = {}\n",
        "n = int(input(\"enter number of decades: \"))\n",
        "for i in range(n):\n",
        "    year = int(input(\"Enter year \"+str(i+1)+\": \"))\n",
        "    pop = int(input(\"Enter population: \"))\n",
        "    data[year] = pop\n",
        "    \n",
        "#Asking user to select the method for forecasting\n",
        "#c = int(input(\"Select the method for forecasting (choose b/w 1-4): \"))\n",
        "\n",
        "#updated data\n",
        "data_up = {}\n",
        "\n",
        "df = pd.DataFrame.from_dict({\"Year\":list(pop_fore_AIM(copy.deepcopy(data)).keys()), \"Pop_by_AIM\": list(pop_fore_AIM(copy.deepcopy(data)).values()),\n",
        "                              \"Pop_by_GIM\": list(pop_fore_GIM(copy.deepcopy(data)).values()),\n",
        "                              \"pop_by_IIM\": list(pop_fore_IIM(copy.deepcopy(data)).values()),\n",
        "                              \"Pop_by_DGM\": list(pop_fore_DGM(copy.deepcopy(data)).values())})\n",
        "print(df)\n",
        "#plotting graphs for all methods\n",
        "fig, axs = plt.subplots(2, 2)\n",
        "axs[0, 0].plot(list(pop_fore_AIM(copy.deepcopy(data)).keys()), list(pop_fore_AIM(copy.deepcopy(data)).values()))\n",
        "axs[0, 0].set_title('Arithmetic Increase Method')\n",
        "axs[0, 1].plot(list(pop_fore_GIM(copy.deepcopy(data)).keys()), list(pop_fore_GIM(copy.deepcopy(data)).values()), 'tab:orange')\n",
        "axs[0, 1].set_title('Geometric Increase Method')\n",
        "axs[1, 0].plot(list(pop_fore_IIM(copy.deepcopy(data)).keys()), list(pop_fore_IIM(copy.deepcopy(data)).values()), 'tab:green')\n",
        "axs[1, 0].set_title('Incremental Increase Method')\n",
        "axs[1, 1].plot(list(pop_fore_DGM(copy.deepcopy(data)).keys()), list(pop_fore_DGM(copy.deepcopy(data)).values()), 'tab:red')\n",
        "axs[1, 1].set_title('Decreasing Growth Method')\n",
        "\n",
        "for ax in axs.flat:\n",
        "    ax.set(xlabel='Year', ylabel='Population')\n",
        "\n",
        "# Hide x labels and tick labels for top plots and y ticks for right plots.\n",
        "for ax in axs.flat:\n",
        "    ax.label_outer()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 638
        },
        "id": "EQGf3bldh--g",
        "outputId": "3111b816-f0d1-4a6e-e2bd-adc850dbc827"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "------Welcome To Population Growth Predictor------\n",
            "1. Arithmetic Increase Method\n",
            "2. Geometic Increase Method\n",
            "3. Incremental Increase Method\n",
            "4. Decrease Rate of Growth Method\n",
            "enter number of decades: 4\n",
            "Enter year 1: 1940\n",
            "Enter population: 8000\n",
            "Enter year 2: 1950\n",
            "Enter population: 12000\n",
            "Enter year 3: 1960\n",
            "Enter population: 17000\n",
            "Enter year 4: 1970\n",
            "Enter population: 22500\n",
            "   Year  Pop_by_AIM  Pop_by_GIM  pop_by_IIM  Pop_by_DGM\n",
            "0  1940        8000        8000        8000        8000\n",
            "1  1950       12000       12000       12000       12000\n",
            "2  1960       17000       17000       17000       17000\n",
            "3  1970       22500       22500       22500       22500\n",
            "4  1980       27333       31801       28083       27810\n",
            "5  1990       32166       44948       34416       31925\n",
            "6  2000       36999       63529       41500       33840\n",
            "7  2010       41833       89793       49333       32892\n",
            "8  2020       46666      126913       57916       29076\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}